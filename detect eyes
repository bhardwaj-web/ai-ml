import numpy as np
import cv2

# Load Haar cascade classifiers for face and eyes
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

# Ensure cascades are loaded correctly
if face_cascade.empty() or eye_cascade.empty():
    print("Error: Haarcascade XML files not found!")
    exit()

# Read the image
img = cv2.imread('img_3.png')

# Convert to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Detect faces
faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5, minSize=(30, 30))

# Loop through detected faces
for (x, y, w, h) in faces:
    cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)  # Draw face rectangle
    roi_gray = gray[y:y+h, x:x+w]  # Region of Interest (ROI) for eyes
    roi_color = img[y:y+h, x:x+w]

    # Detect eyes in the face ROI
    eyes = eye_cascade.detectMultiScale(roi_gray, scaleFactor=1.1, minNeighbors=5, minSize=(15, 15))
    for (ex, ey, ew, eh) in eyes:
        cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)  # Draw eyes rectangle

# Display the image with detected face and eyes
cv2.imshow('Detected Face and Eyes', img)
cv2.waitKey(0)
cv2.destroyAllWindows()
